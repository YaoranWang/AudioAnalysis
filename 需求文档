这次项目，我只需要交我负责的Audio Analysis模块，不需要包含视频分析、文本分析、总集成等其他模块内容。

我的Audio Analysis模块要求是：

上传音频文件（支持.wav/.mp3）

自动进行音频转文字（Speech-to-Text）

可以用Whisper开源模型，不需要自己训练

要支持至少英文和中文

对转出的文字进行有害内容检测（检测xenophobic、toxic语言）

可以用Huggingface已有的有害文本分类器

在Streamlit界面上展示：

用户上传音频 ➔ 自动转文字 ➔ 自动检测 ➔ 返回检测结果

提供README文档，标明安装方法和使用流程

只需要做英文和中文检测，其他联合国语言（法语、西班牙语、阿拉伯语、俄语）可以在代码中留接口或在README中说明为future work。

目标是提交完整的Audio Analysis模块部分，符合学校的正式交付标准。




🛠️ Audio Analysis模块 - 完整交付要求
1. 音频上传功能
允许上传 .wav 或 .mp3 格式的音频文件。

2. 音频转文字（Speech-to-Text）
使用Whisper等开源Speech-to-Text模型。

要支持至少英文和中文音频的转录。

其他UN官方语言（法语、西班牙语、阿拉伯语、俄语）留接口（如通过参数指定语言），暂时不实现检测。

3. 有害内容检测（Harmful Content Detection）
对转录得到的文字进行有害内容检测。

使用Huggingface上已有的模型，例如 unitary/toxic-bert 或其他成熟模型。

返回结果包含：

是否发现有害内容

有害内容的详细分类（toxic, hateful, threat等）

4. Web界面（Streamlit）
搭建一个简单的Streamlit前端，包括：

上传音频

显示转写出的文字

显示有害内容检测的分析结果

5. README文档
写清楚：

安装依赖（Python版本，pip安装指令）

如何运行项目（启动Streamlit指令）

使用说明（上传音频 → 检测流程）

当前支持语言（英文、中文）

其他语言是Future Work，标注清楚

6. 其他要求
所有Python代码需要注释清楚，结构清晰。

目录结构规范（最好分模块，比如 audio_utils.py, text_utils.py, app.py）

代码可以本地运行，不需要部署到服务器。

能够顺利跑通一个上传测试音频、转文字、检测的完整流程。
